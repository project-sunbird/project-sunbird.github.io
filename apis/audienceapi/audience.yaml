swagger: '2.0'
info:
  version: '1.0'
  title: Audience API(s)
  description: >-
         Audience API resources allow to get a count of users from a particular location.
  license:
    name: GNU Affero General Public License v3.0
    url: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
host: staging.open-sunbird.org
basePath: /framework/v1
securityDefinitions:
  auth:
    type: apiKey
    name: Authorization
    in: header
schemes:
  - https
consumes:
  - application/json
  - multipart/form-data
  - application/x-www-form-urlencoded
produces:
  - application/json
paths:
  /audience:
    post:
      description: >-
       This API is associated with getting the user count foa specific location on the Sunbird Platform.
          - The **_/audience_** endpoint executes the "AudiencePost" request based on parameters provided as metadata in the request body
          - Required fields cannot be left null or empty
      summary: Get Audience Count for a location
      operationId: AudiencePost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for getting a count of users foa a specific location.
        schema:
          $ref: '#/definitions/GetTheAudienceCountForALocationsrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: id
        in: header
        required: true
        type: string
        description: 'The Registered User ID to execute the API'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **get audience count for a specific location** request was sent'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API.'
      responses:
        '200':
          description: 'OK ! Successful operation." get the audience count for a locations" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The " get the audience count for a locations" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /audience
          headers:
            Content-Type: application/json
            id: id
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "\r\n{\r\n \"params\": { },\r\n    \"request\":{\r\n         \"locationIds\" : [\"123\",\"456\"],\r\n         \"userListReq\" : false,\r\n         \"estimatedCountReq\" : false\r\n   }\r\n}  "
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: get the audience count for a locations
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  GetTheAudienceCountForALocationsrequest:
    title: get the audience count for a locationsRequest
    example:
      params: {}
      request:
        locationIds:
        - 123
        - 456
        userListReq: false
        estimatedCountReq: false
    type: object
    properties:
      params:
        description: ''
        example: {}
        type: object
      request:
        $ref: '#/definitions/Request'
        example:
          locationIds:
          - 123
          - 456
          userListReq: false
          estimatedCountReq: false
    required:
    - params
    - request
  Request:
    title: Request
    example:
      locationIds:
      - 123
      - 456
      userListReq: false
      estimatedCountReq: false
    type: object
    properties:
      locationIds:
        description: ''
        example:
        - 123
        - 456
        type: array
        items:
          type: string
      userListReq:
        description: ''
        example: false
        type: boolean
      estimatedCountReq:
        description: ''
        example: false
        type: boolean
    required:
    - locationIds
    - userListReq
    - estimatedCountReq
  ResultWithNodeId:
    title: Result Containing Node Id
    type: object
    properties:
      result:
        $ref: '#/definitions/NodeId'
  ContentCreateResponse:
    description: Create Content Response
    type: object
    allOf:
      - $ref: '#/definitions/ResultWithNodeId'
      - $ref: '#/definitions/ResponseHeader'
  ResponseHeader:
    title: ResponseHeader
    type: object
    properties:
      id:
        type: string
        description: API Identifier
      ver:
        type: string
        description: API version information
      ts:
        type: string
        description: API execution timespan
      params:
        $ref: '#/definitions/ResponseParams'
      responseCode:
        type: object
        description: 'API response code '
  ResponseParams:
    title: Response Parameter
    type: object
    properties:
      resmsgid:
        type: string
        description: Response Message Id
      msgid:
        type: string
        description: Message Id
      err:
        type: string
        description: Error Code
      status:
        type: string
        description: Response Status
      errmsg:
        type: string
        description: Error Message
  EmptyResult:
    title: Empty Result
    type: object
    properties:
      result:
        type: object
        description: Empty Result
  NodeId:
    title: Node Id
    type: object
    properties:
      node_id:
        type: string
        description: Node Identifier
  ContentCreateErrorResponse:
    title: Create Content Error Response
    type: object
    allOf:
      - $ref: '#/definitions/EmptyResult'
      - $ref: '#/definitions/ResponseHeader'

swagger: '2.0'
info:
  description: >-
    Data exhaust API resource refers to the data generated as trails or information byproducts resulting from all user activities.
      - These resources are used to improve online processes based on
      the behaviors of users 
      - Also these resources are used to minimize required actions and find areas to optimize, improve or change outright 
      - Data exhaust also helps in data mining analytics
  license:
    name: GNU Affero General Public License v3.0
    url: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
  title: Data Exhaust API(s)
  termsOfService: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
  contact:
    email: info@sunbird.org
  version: "1.0"
host: staging.open-sunbird.org
basePath: /data/v1/dataset/request/
securityDefinitions:    
    auth:
      type: apiKey  # arbitrary name for the security scheme
      in: header # The secrity scheme parameter is in "header"
      name: Authorization # name of the header, query parameter or cookie
schemes:
  - https
paths:
   /submit:
    post:
      description: >-
        This API is used to submit the data request to get the exhaust data 
          - The response of the request initiates with the creation of a data file
          - This data file can be downloaded and used for analytics etc.
      operationId: Submit Data Request
      produces:
        - application/json
      tags:
        - Data Exhaust API(s)
      parameters:
        - name: Authorization
          in: header
          description: 'To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
          required: true
          type: string
        - name: Body
          in: body
          description: >-
            The body refers to the format of the request.
              - The body contains metadata about the data request to be sent
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/dataRequestBody'
      responses:
        '200':
          description: 'SUCCESS. The **Submit Data Request** operation was successful!'
          schema:
            $ref: '#/definitions/dataExhaustResponse'
        '400':
          description:  'BAD REQUEST,**Submit Data Request** operation failed !The possible reason for failure is that you may have missed providing input for a mandatory parameter' 
          schema:  
            allOf:
             - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
        '500':
          description: 'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
      security: []
   /list/{client_key}:
    get:
      description: >-
        This API is used to list the status messages and other data  related activities that are specific to a channel
          - the format of the url is  **/request/list/{your channel ID}**
          - {...} represents a variable value which is your channel ID, append a valid channel ID to the request URL 
      operationId: List Requests
      produces:
        - application/json
      tags:
        - Data Exhaust API(s)
      parameters:
        - in: path
          name: client_key
          description: 'Unique key/ID of the requester. In case of partners, the value can be partner_key'
          required: true
          type: string
        - in: query
          name: limit
          description: 'Represents the limit of result entries, default limit is set to 100' 
          required: false
          type: string
      responses:
        '200':
          description: 'SUCCESS. The **list status** operation was successful!'
          schema:
            $ref: '#/definitions/JobListResponse'
        '400':
          description:  'BAD REQUEST,**list status** operation failed !The possible reason for failure is that you may have missed providing input for a mandatory parameter' 
          schema:  
            allOf:
             - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
        '500':
          description: 'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
      security: []
   /read/{client_key}/{request_ID}:
    get:
      description: >-
        This API is used to fetch and view the current status of the data that gets generated by user interaction and activities. - the format of the url is  **/read/{channel_ID}/{requestId}**
          - {...} represents a variable value which is your channel ID and the request ID, append a valid channel ID, Request ID to the request URL 
      operationId: Get Request Details
      produces:
        - application/json
      tags:
        - Data Exhaust API(s)
      parameters:
        - in: path
          name: client_key
          description: 'Unique key/ID of the requester. In case of partners, the value can be partner_key'
          required: true
          type: string
        - in: path
          name: request_ID
          description: >-
            Request ID provided in the response when the job execution request is made.
          required: true
          type: string
      responses:
        '200':
          description: 'SUCCESS. The **fetch current status** operation was successful!'
          schema:
            $ref: '#/definitions/JobInfoResponse'
        '400':
          description:  'BAD REQUEST,**fetch current status** operation failed !The possible reason for failure is that you may have missed providing input for a mandatory parameter' 
          schema:  
            allOf:
             - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
        '500':
          description: 'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
      security: []
definitions:
  dataRequestBody:
    title: DataExhaust - Data Request
    type: object
    properties:
      id:
        x-go-name: ID
        type: string
        description: unique API ID=data_exhaust_dataset_service
      ver:
        x-go-name: Ver
        type: string
        description: API version=1.0
      ts:
        x-go-name: Ts
        type: string
        description: 'request timestamp in format: YYYY-MM-DDThh:mm:ss+/-nn:nn'
      params:
        $ref: '#/definitions/RequestParams'
      request:
        $ref: '#/definitions/DataExhaustRequest'
    required:
      - id
      - ver
      - ts
      - params
      - request
  DataExhaustJobStats:
    title: JobState
    type: object
    properties:
      dt_job_submitted:
        type: integer
        description: DateTime when the job is submitted
      dt_job_processing:
        type: integer
        description: DateTime when the job is picked up for processing
      dt_job_completed:
        type: integer
        description: DateTime when the job is complete
      input_events:
        type: integer
        description: Total input events processed
      output_events:
        type: integer
        description: Total output events produced
      latency:
        type: integer
        description: >-
          Latency in seconds from the time the job is submitted before picked up
          for processing
      execution_time:
        type: integer
        description: Total time taken for processing excluding latency
  dataExhaustResponse:
    type: object
    properties:
      id:
        type: string
      ver:
        type: string
      ts:
        type: string
      params:
        $ref: '#/definitions/ResponseParams'
      responseCode:
        type: string
      result:
        $ref: '#/definitions/dataExhaustResult'
  RequestParams:
    title: Params
    type: object
    properties:
      msgid:
        type: string
        x-go-name: MsgID
        description: 'unique request message id, UUID, for handling API idempotency'
      client_key:
        type: string
        x-go-name: Client_Key
        description: Unique ID of the requestor. In partner case the partner id
    required:
      - client_key
  DataExhaustRequest:
    title: Request
    type: object
    properties:
      dataset_id:
        x-go-name: dataset_id
        type: string
        description: To identify the dataset to fetch the data
      filter:
        $ref: '#/definitions/DataExhaustFilter'
      output_format:
        type: string
        description: Output format should be either json or csv. Default value is json
    required:
      - filter
      - dataset_id
  DataExhaustFilter:
    title: Filter
    type: object
    properties:
      start_date:
        type: string
        description: Start date of the data exhaust
      end_date:
        type: string
        description: End date of the data exhaust
      app_id:
        type: string
        description: Filter by app_id. (Optional)
      channel:
        type: string
        description: Filter by channel_id.(Optional)
      events:
        type: array
        items:
          type: string
          description: List of events to filter and return.(Optional)
      tags:
        type: array
        items:
          type: string
          description: Filter by tag. (Optional)
    required:
      - start_date
      - end_date
  JobListResponse:
    type: object
    properties:
      id:
        type: string
      ver:
        type: string
      ts:
        type: string
      params:
        $ref: '#/definitions/ResponseParams'
      responseCode:
        type: string
      result:
        $ref: '#/definitions/JobListResult'
  JobInfoResponse:
    type: object
    properties:
      id:
        type: string
      ver:
        type: string
      ts:
        type: string
      params:
        $ref: '#/definitions/ResponseParams'
      responseCode:
        type: string
      result:
        $ref: '#/definitions/JobResult'
  ResponseParams:
    title: Params
    type: object
    properties:
      resmsgid:
        type: string
      status:
        type: string
  dataExhaustResult:
    type: object
    properties:
      job_stats:
        $ref: '#/definitions/DataExhaustJobStats'
      last_updated:
        type: integer
      status:
        type: string
      request_id:
        type: string
      output:
        $ref: '#/definitions/DataExhaustOutputResult'
      request_data:
        $ref: '#/definitions/DataExhaustRequest'
  associateResponse:
    type: object
    description: The response when license key is successfully associated with a resource
    properties:
      id:
        type: string
        description: unique API ID=ekstep.data_exhaust_resource_associate
      ts:
        type: string
        description: 'response timestamp YYYY-MM-DDThh:mm:ss+/-nn:nn'
      ver:
        type: string
        description: API version=1.0
      params:
        $ref: '#/definitions/responseParams'
  responseParams:
    type: object
    properties:
      resmsgid:
        description: unique response message id (UUID)
        type: string
        x-go-name: ResMsgId
      msgid:
        description: message id of the request
        type: string
        x-go-name: MsgId
      status:
        description: 'status of request e.g: successful, failed etc'
        type: string
        x-go-name: Status
      err:
        description: error code if any
        type: string
        x-go-name: ErrorCode
      errmsg:
        description: default English error message
        type: string
        x-go-name: ErrorMessage
    x-go-package: ecosystem-platform-api/api
  registerErrorResponse:
    type: object
    properties:
      resmsgid:
        description: unique response message id (UUID)
        type: string
        x-go-name: ResMsgId
      msgid:
        description: message id of the request
        type: string
        x-go-name: MsgId
      status:
        description: failed
        type: string
        x-go-name: Key
      err:
        description: one of the following error codes
        type: string
        x-go-name: ErrorCode
        enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - INTERNAL_ERROR - Technical error in the API
      errmsg:
        description: default English error message
        type: string
        x-go-name: ErrorMessage
  authenticateErrorResponse:
    type: object
    properties:
      resmsgid:
        description: unique response message id (UUID)
        type: string
        x-go-name: ResMsgId
      msgid:
        description: message id of the request
        type: string
        x-go-name: MsgId
      status:
        description: failed
        type: string
        x-go-name: Key
      err:
        description: one of the following error codes
        type: string
        x-go-name: ErrorCode
        enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - LOGIN_FAILED - License key is invalid
          - INTERNAL_ERROR - Technical error in the API
      errmsg:
        description: default English error message
        type: string
        x-go-name: ErrorMessage
  DataExhaustOutputResult:
    title: Output
    type: object
    properties:
      dt_file_created:
        type: string
      dt_first_event:
        type: integer
      dt_last_event:
        type: integer
  authorizeErrorResponse:
    type: object
    properties:
      resmsgid:
        description: unique response message id (UUID)
        type: string
        x-go-name: ResMsgId
      msgid:
        description: message id of the request
        type: string
        x-go-name: MsgId
      status:
        description: failed
        type: string
        x-go-name: Key
      err:
        description: one of the following error codes
        type: string
        x-go-name: ErrorCode
        enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - >-
            AUTHORIZATION_FAILED - User does not have access to the given
            dataset or resource
          - LOGIN_FAILED - License key is invalid
          - INTERNAL_ERROR - Technical error in the API
      errmsg:
        description: default English error message
        type: string
        x-go-name: ErrorMessage
  JobResult:
    type: array
    items:
      type: object
      properties:
        request_id:
          type: string
        status:
          type: string
        last_updated:
          type: integer
        request_data:
          $ref: '#/definitions/DataExhaustRequest'
        output:
          type: array
          items:
            $ref: '#/definitions/DataExhaustOutputResult'
        job_stats:
          $ref: '#/definitions/DataExhaustJobStats'
  JobListResult:
    type: object
    properties:
      count:
        type: integer
      jobs:
        $ref: '#/definitions/JobResult'
  associateErrorResponse:
    type: object
    properties:
      resmsgid:
        description: unique response message id (UUID)
        type: string
        x-go-name: ResMsgId
      msgid:
        description: message id of the request
        type: string
        x-go-name: MsgId
      status:
        description: failed
        type: string
        x-go-name: Key
      err:
        description: one of the following error codes
        type: string
        x-go-name: ErrorCode
        enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - LOGIN_FAILED - License key is invalid
          - INTERNAL_ERROR - Technical error in the API
      errmsg:
        description: default English error message
        type: string
        x-go-name: ErrorMessage
responses:
  AssociateResponse:
    description: Success response associating resource with license key
    schema:
      $ref: '#/definitions/associateResponse'
  RegisterErrorResponse:
    description: Error responses when data exhaust apis fail
    schema:
      $ref: '#/definitions/registerErrorResponse'
  AuthenticateErrorResponse:
    description: Error responses when data exhaust apis fail
    schema:
      $ref: '#/definitions/authenticateErrorResponse'
  AuthorizeErrorResponse:
    description: Error responses when data exhaust apis fail
    schema:
      $ref: '#/definitions/authorizeErrorResponse'
  AssociateErrorResponse:
    description: Error responses when data exhaust apis fail
    schema:
      $ref: '#/definitions/associateErrorResponse'

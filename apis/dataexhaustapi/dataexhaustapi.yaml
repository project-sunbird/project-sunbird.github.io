
swagger: "2.0"
info:
  description: >-
    Set of internal apis available to interact with the data exhaust. It covers
    the security and registeration aspects.
  title: DataExhaust-API
  version: v1
host: staging.open-sunbird.org
schemes:
  - https
paths:
  /data/v1/dataset/request/submit:
    post:
      description: >-
        Data exhaust API is used to submit a job to create a data file that can
        be downloaded once the job is complete. request_id is returned by the
        API that is used to retrieve status periodically. 
      operationId: Submit Data Request
      produces:
        - application/json
      tags:
        - dataExhaust
      parameters:
        - name: Authorization
          in: header
          description: An authorization header
          required: true
          type: string
        - name: Body
          in: body
          required: true
          x-is-map: false
          schema:
            $ref: '#/definitions/dataRequestBody'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/dataExhaustResponse'
      security: []
  '/data/v1/dataset/request/list/{channel}':
    get:
      description: >-
        This API will take the client_key and return the respose with job status
        message and any other details specific to channel.
      operationId: List Requests
      produces:
        - application/json
      tags:
        - dataExhaust
      parameters:
        - in: path
          name: channel
          description: Client id given when the job execution request made. (Mandatory)
          required: true
          type: string
        - in: query
          name: limit
          description: Result jobs limit. Default limit is 100. (Optional)
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/JobListResponse'
      security: []
  '/data/v1/dataset/request/read/{channel}/{requestId}':
    get:
      description: >-
        This API will take the client_key , request id and return the respose
        with job status, message, and any other details specific to the job
        (data). This API is used to retrieve the latest status of the job
        including output
      operationId: Get Request Details
      produces:
        - application/json
      tags:
        - dataExhaust
      parameters:
        - in: path
          name: channel
          description: Client id given when the job execution request made. (Mandatory)
          required: true
          type: string
        - in: path
          name: requestId
          description: >-
            Request ID provided in the response when the job execution request
            made.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/JobInfoResponse'
      security: []
  '/data/v1/dataset/request/{channel}':
    get:
      description: >-
        This API will take the channel and from and to dates and will return the data
      produces:
        - application/json
      tags:
        - dataExhaust
      parameters:
        - in: path
          name: channel
          description: Channel id required to execute the opration
          required: true
          type: string
        - in: query
          type: string
          name: from
          description: >-
            The date format is eg 2017-08-24.
          required: true  
        - in: query
          name: to
          description: >-
            The date format is eg 2017-08-24.    
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/JobInfoResponse'
      security: []      
definitions:
  dataRequestBody:
    title: DataExhaust - Data Request
    type: object
    properties:
      id:
        x-go-name: ID
        type: string
        description: unique API ID=data_exhaust_dataset_service
      ver:
        x-go-name: Ver
        type: string
        description: API version=1.0
      ts:
        x-go-name: Ts
        type: string
        description: 'request timestamp in format: YYYY-MM-DDThh:mm:ss+/-nn:nn'
      params:
        $ref: '#/definitions/RequestParams'
      request:
        $ref: '#/definitions/DataExhaustRequest'
    required:
      - id
      - ver
      - ts
      - params
      - request
  DataExhaustJobStats:
    title: JobState
    type: object
    properties:
      dt_job_submitted:
        type: integer
        description: DateTime when the job is submitted
      dt_job_processing:
        type: integer
        description: DateTime when the job is picked up for processing
      dt_job_completed:
        type: integer
        description: DateTime when the job is complete
      input_events:
        type: integer
        description: Total input events processed
      output_events:
        type: integer
        description: Total output events produced
      latency:
        type: integer
        description: >-
          Latency in seconds from the time the job is submitted before picked up
          for processing
      execution_time:
        type: integer
        description: Total time taken for processing excluding latency
  dataExhaustResponse:
    type: object
    properties:
      id:
        type: string
      ver:
        type: string
      ts:
        type: string
      params:
        $ref: '#/definitions/ResponseParams'
      responseCode:
        type: string
      result:
        $ref: '#/definitions/dataExhaustResult'
  RequestParams:
    title: Params
    type: object
    properties:
      msgid:
        type: string
        x-go-name: MsgID
        description: 'unique request message id, UUID, for handling API idempotency'
      client_key:
        type: string
        x-go-name: Client_Key
        description: uniqueID of the requestor. In partner case the partner id
    required:
      - client_key
  DataExhaustRequest:
    title: Request
    type: object
    properties:
      dataset_id:
        x-go-name: dataset_id
        type: string
        description: To identify the dataset to fetch the data
      filter:
        $ref: '#/definitions/DataExhaustFilter'
      output_format:
        type: string
        description: Output format should be either json or csv. Default value is json
    required:
      - filter
      - dataset_id
  DataExhaustFilter:
    title: Filter
    type: object
    properties:
      start_date:
        type: string
        description: Start date of the data exhaust
      end_date:
        type: string
        description: End date of the data exhaust
      app_id:
        type: string
        description: Filter by app_id. (Optional)
      channel:
        type: string
        description: Filter by channel_id.(Optional)
      events:
        type: array
        items:
          type: string
          description: List of events to filter and return.(Optional)
      tags:
        type: array
        items:
          type: string
          description: Filter by tag. (Optional)
    required:
      - start_date
      - end_date
  JobListResponse:
    type: object
    properties:
      id:
        type: string
      ver:
        type: string
      ts:
        type: string
      params:
        $ref: '#/definitions/ResponseParams'
      responseCode:
        type: string
      result:
        $ref: '#/definitions/JobListResult'
  JobInfoResponse:
    type: object
    properties:
      id:
        type: string
      ver:
        type: string
      ts:
        type: string
      params:
        $ref: '#/definitions/ResponseParams'
      responseCode:
        type: string
      result:
        $ref: '#/definitions/JobResult'
  ResponseParams:
    title: Params
    type: object
    properties:
      resmsgid:
        type: string
      status:
        type: string
  dataExhaustResult:
    type: object
    properties:
      job_stats:
        $ref: '#/definitions/DataExhaustJobStats'
      last_updated:
        type: integer
      status:
        type: string
      request_id:
        type: string
      output:
        $ref: '#/definitions/DataExhaustOutputResult'
      request_data:
        $ref: '#/definitions/DataExhaustRequest'
  associateResponse:
    type: object
    description: The response when license key is successfully associated with a resource
    properties:
      id:
        type: string
        description: unique API ID=ekstep.data_exhaust_resource_associate
      ts:
        type: string
        description: 'response timestamp YYYY-MM-DDThh:mm:ss+/-nn:nn'
      ver:
        type: string
        description: API version=1.0
      params:
        $ref: '#/definitions/responseParams'
  responseParams:
    type: object
    properties:
      resmsgid:
        description: unique response message id (UUID)
        type: string
        x-go-name: ResMsgId
      msgid:
        description: message id of the request
        type: string
        x-go-name: MsgId
      status:
        description: 'status of request e.g: successful, failed etc'
        type: string
        x-go-name: Status
      err:
        description: error code if any
        type: string
        x-go-name: ErrorCode
      errmsg:
        description: default English error message
        type: string
        x-go-name: ErrorMessage
    x-go-package: ecosystem-platform-api/api
  registerErrorResponse:
    type: object
    properties:
      resmsgid:
        description: unique response message id (UUID)
        type: string
        x-go-name: ResMsgId
      msgid:
        description: message id of the request
        type: string
        x-go-name: MsgId
      status:
        description: failed
        type: string
        x-go-name: Key
      err:
        description: one of the following error codes
        type: string
        x-go-name: ErrorCode
        enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - INTERNAL_ERROR - Technical error in the API
      errmsg:
        description: default English error message
        type: string
        x-go-name: ErrorMessage
  authenticateErrorResponse:
    type: object
    properties:
      resmsgid:
        description: unique response message id (UUID)
        type: string
        x-go-name: ResMsgId
      msgid:
        description: message id of the request
        type: string
        x-go-name: MsgId
      status:
        description: failed
        type: string
        x-go-name: Key
      err:
        description: one of the following error codes
        type: string
        x-go-name: ErrorCode
        enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - LOGIN_FAILED - License key is invalid
          - INTERNAL_ERROR - Technical error in the API
      errmsg:
        description: default English error message
        type: string
        x-go-name: ErrorMessage
  DataExhaustOutputResult:
    title: Output
    type: object
    properties:
      dt_file_created:
        type: string
      dt_first_event:
        type: integer
      dt_last_event:
        type: integer
  authorizeErrorResponse:
    type: object
    properties:
      resmsgid:
        description: unique response message id (UUID)
        type: string
        x-go-name: ResMsgId
      msgid:
        description: message id of the request
        type: string
        x-go-name: MsgId
      status:
        description: failed
        type: string
        x-go-name: Key
      err:
        description: one of the following error codes
        type: string
        x-go-name: ErrorCode
        enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - >-
            AUTHORIZATION_FAILED - User does not have access to the given
            dataset or resource
          - LOGIN_FAILED - License key is invalid
          - INTERNAL_ERROR - Technical error in the API
      errmsg:
        description: default English error message
        type: string
        x-go-name: ErrorMessage
  JobResult:
    type: array
    items:
      type: object
      properties:
        request_id:
          type: string
        status:
          type: string
        last_updated:
          type: integer
        request_data:
          $ref: '#/definitions/DataExhaustRequest'
        output:
          type: array
          items:
            $ref: '#/definitions/DataExhaustOutputResult'
        job_stats:
          $ref: '#/definitions/DataExhaustJobStats'
  JobListResult:
    type: object
    properties:
      count:
        type: integer
      jobs:
        $ref: '#/definitions/JobResult'
  associateErrorResponse:
    type: object
    properties:
      resmsgid:
        description: unique response message id (UUID)
        type: string
        x-go-name: ResMsgId
      msgid:
        description: message id of the request
        type: string
        x-go-name: MsgId
      status:
        description: failed
        type: string
        x-go-name: Key
      err:
        description: one of the following error codes
        type: string
        x-go-name: ErrorCode
        enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - LOGIN_FAILED - License key is invalid
          - INTERNAL_ERROR - Technical error in the API
      errmsg:
        description: default English error message
        type: string
        x-go-name: ErrorMessage
responses:
  AssociateResponse:
    description: Success response associating resource with license key
    schema:
      $ref: '#/definitions/associateResponse'
  RegisterErrorResponse:
    description: Error responses when data exhaust apis fail
    schema:
      $ref: '#/definitions/registerErrorResponse'
  AuthenticateErrorResponse:
    description: Error responses when data exhaust apis fail
    schema:
      $ref: '#/definitions/authenticateErrorResponse'
  AuthorizeErrorResponse:
    description: Error responses when data exhaust apis fail
    schema:
      $ref: '#/definitions/authorizeErrorResponse'
  AssociateErrorResponse:
    description: Error responses when data exhaust apis fail
    schema:
      $ref: '#/definitions/associateErrorResponse'

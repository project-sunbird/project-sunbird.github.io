swagger: '2.0'
info:
  version: '1.0'
  title: User Management  API(s)
  description: >-
    The User API resources perform operations related to 
    the _Users_ on the Sunbird Platform. The basic operations include Creation, Updation,Reading & searching.
  license:
    name: GNU Affero General Public License v3.0
    url: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
host: staging.open-sunbird.org
basePath: /api/user/v1
securityDefinitions:
  auth:
    type: apiKey
    name: api_key
    in: header
schemes:
  - https
consumes:
  - application/json
  - multipart/form-data
  - application/x-www-form-urlencoded
produces:
  - application/json
paths:
 /create:
    post:
      description: >-
       This API is associated with creation of user on the Sunbird Platform.
          - **_/create/_** endpoint executes the "Create User" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Create User
      tags:
      - User APIs
      operationId: Create User
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the user to be created.
        schema:
          $ref: '#/definitions/CreateUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            The Content Type entity is the media type of the resource.Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **create user** request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Create User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Create User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.' 
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /search:
    post:
      description: >-
       This API is associated for searching a particular user on the Sunbird Platform.
          - **_/search/_** endpoint executes the "Search User" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Search User
      tags:
      - User APIs
      operationId: Search User
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the user to be fetched.
        schema:
          $ref: '#/definitions/SearchUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            The Content Type entity is the media type of the resource.Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The Registered User ID to execute the API.'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **Search User** request was sent.'
      responses:
        '200':
          description: 'OK ! Successful operation."Search User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Search User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/search
          headers:
            Content-Type: application/json
            Authorization: Bearer {{api_key}}
            X-Authenticated-Userid: '{{user_id}}'
            ts: 2017-05-25 10:18:56:578+0530
          body: >-
            {
                "request": {
                    "filters":{
                      "provider": ["apekx"]
                    },
                    "limit": 500
                }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Search User
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /read:
    post:
      description: >-
        This API is associated with fetching User profile on the Sunbird Platform.
          - **_/profile/read_** endpoint executes the "Get User By Login Id" request to fetch the User profile.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Get User by Login Id
      tags:
      - User APIs
      operationId: Get User by Login Id
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the user profile to be fetched using Login Id.
        schema:
          $ref: '#/definitions/GetUserByLoginIdrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description:  >-
            The Content Type entity is the media type of the resource.Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The Registered User ID to execute the API.'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **Get User by Login Id** request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Fetching User profile" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST,"Fetching User profile" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/profile/read
          headers:
            Content-Type: application/json
            x-authenticated-user-token: '{{user_id}}'
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api_key}}
          body: >-
            {
              "request": {
                "loginId": "test_apis_2@sunbird-integrator-test.org"
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get User by Login Id
        x-testDescription: create user
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /read/{User_Id}:
    parameters:
      - in: path
        name: User_Id
        type: string
        required: true
        description: 'Please append a valid User Id To the Request URL'   
    get:
      description: >-
        This API is associated with searching user on the Sunbird Platform.
          - **_/read/{User_Id}_** endpoint executes the "Fetch User profile" request. 
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Fetch User by User Id
      tags:
      - User APIs
      operationId: Get User by Id
      produces:
      - application/json
      parameters:
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The Registered User ID to execute the API.'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            The Content Type entity is the media type of the resource.Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **Get User by Login Id** request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Get User by Id" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST,"Get User by Id" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /user/v1/read/{User_Id}
          headers:
            x-authenticated-user-token: '{{user_id}}'
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api_key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get User by Id
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false      
 /update:
    patch:
      description:  >-
        This API is associated with updating user details on the Sunbird Platform.
          - **_/update/_** endpoint executes the "Update User" request.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Updates User
      tags:
      - User APIs
      operationId: Update User
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description:  >-
            The body refers to the format of the request.
              - The body contains metadata about the user to be updated.
        schema:
          $ref: '#/definitions/UpdateUserrequest'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The Registered User ID to execute the API.'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            The Content Type entity is the media type of the resource.Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **Update User** request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Update User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Update User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false  
 /logout:
    post:
      description: >-
       This API is associated with Logging out users on the Sunbird Platform.
          - The **_/logout_** endpoint executes the "logout" request based on parameters provided as metadata in the request body.
          - The format of the request URL is: {{host}}/v1/user/logout
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Logs Out a User
      tags:
      - User APIs
      operationId: '{{host}}/v1/user/logout'
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
          The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **Logout User** request was sent.'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: X-Device-ID
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies the type of device (Mobile)(desktop) used to access Sunbird.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All the APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Logout User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Logout User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/logout
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: xyz-123-000-9888
            X-Device-ID: X-Device-ID
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: fe109c81be7e08b5e049e57a51343dfec2fbeaa062f9ecaf7b86852aaa28eb38
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/logout'
        x-testDescription: Logout api
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /login:
    post:
      description: >-
       This API is associated with Logging in users on the Sunbird Platform.
          - The **_/login_** endpoint executes the "logs in a user" request based on parameters provided as metadata in the request body.
          - The format of the request URL is: {{host}}/v1/user/login
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Logs In a User
      tags:
      - User APIs
      operationId: '{{host}}/v1/user/login'
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
          The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: Time Stamp at which **LogIn User** request was sent.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: X-Device-ID
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies the type of device (Mobile)(desktop) used to access Sunbird.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All the APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."LogIn User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "LogIn  User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/login
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            X-Device-ID: X-Device-ID
            Authorization: Bearer {{api-key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/login'
        x-testDescription: User login api
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /forgotpassword:
    post:
      description:  >-
       This API is associated with resetting a forgotten password on the Sunbird Platform.
          - The **_/forgotpassword_** endpoint executes the "forgot password" request based on parameters provided as metadata in the request body.
          - The format of the request URL is:  {{host}}/v1/user/forgotpassword
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Resets Forgotten Password
      tags:
      - User APIs
      operationId: '{{host}}/v1/user/forgotpassword'
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          The body refers to the format of the request.
            - The body contains metadata about forgot password fields. 
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1forgotpasswordrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
          The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **forgot password** request was sent.'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: X-Device-ID
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies the type of device (Mobile)(desktop) used to access Sunbird.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All the APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."forgot password" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "forgot password" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/forgotpassword
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: xyz-123-000-9888
            X-Device-ID: X-Device-ID
            Authorization: Bearer {{api-key}}
          body: " {\r\n\"id\":\"unique API ID\",\r\n\"ts\":\"2013/10/15 16:16:39\",\r\n  \"params\": {\r\n      \r\n    },\r\n \"request\":{\r\n           \"userName\":\"amit127.kumar17\"       \r\n       }\r\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/forgotpassword'
        x-testDescription: Forgot password api.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /badges/add:
    post:
      description: >-
       This API is associated with adding badges to a user on the Sunbird Platform.
          - The **_/badges/add_** endpoint executes the "add badges to user" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Add badges to user
      tags:
      - User APIs
      operationId: add badges to user
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          The body refers to the format of the request.
            - The body contains metadata about badges to be added to a user. 
        schema:
          $ref: '#/definitions/AddBadgesToUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
          The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **Add badges to user** request was sent.'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: X-Device-ID
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies the type of device (Mobile)(desktop) used to access Sunbird.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The Registered User ID to execute the API.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All the APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Add badges to user" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Add badges to user" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/badges/add
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            X-Device-ID: X-Device-ID
            x-authenticated-user-token: e9280b815c0e41972bf754e9409b66d778b8e11bb91844892869a1e828d7d2f2a
            Authorization: Bearer {{api-key}}
          body: "{\r\n \"params\": { },\r\n    \"request\":{                 \r\n      \"badgeTypeId\": \"123343444\",\r\n    \"receiverId\" :\"5de6b1af-82c3-4f1b-afef-007db7390841\"\r\n      \r\n    }\r\n } "
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: add badges to user
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /changepassword:
    post:
      description: >-
       This API is associated with changing user password on the Sunbird Platform.
          - The **_/changepassword_** endpoint executes the "change password" request based on parameters provided as metadata in the request body.
          - The format of the request URL is: {{host}}/v1/user/changepassword 
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Changes User Password
      tags:
      - User APIs
      operationId: '{{host}}/v1/user/changepassword'
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          The body refers to the format of the request.
            - The body contains metadata about changing user password. 
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1changepasswordrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
          The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **change password** request was sent.'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: X-Device-ID
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies the type of device (Mobile)(desktop) used to access Sunbird.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The Registered User ID to execute the API.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All the APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."change password" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "change password" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/changepassword
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            X-Device-ID: X-Device-ID
            x-authenticated-user-token: e9280b815c0e41972bf754e9409b66d778b8e11bb91844892869a1e828d7d2f2a
            Authorization: Bearer {{api-key}}
          body: "{\r\n\r\n  \"params\": {\r\n       \r\n    },\r\n    \"request\":{ \r\n             \"password\":\"password\",\r\n             \"newPassword\" :\"new password value\"\r\n         }\r\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/changepassword'
        x-testDescription: Change password api.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /update/logintime:
    patch:
      description: >-
       This API is associated with resetting a forgotten password on the Sunbird Platform.
          - The **_/forgotpassword_** endpoint executes the "forgot password" request based on parameters provided as metadata in the request body.
          - The format of the request URL is:  {{host}}/v1/user/updatelogin
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Adds Users Current  Login Time
      tags:
      - User APIs
      operationId: '{{host}}/v1/user/updatelogin'
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          The body refers to the format of the request.
            - The body contains metadata about forgot password fields. 
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1updateloginrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
          The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **Login Time** request was sent.'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: X-Device-ID
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies the type of device (Mobile)(desktop) used to access Sunbird.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The Registered User ID to execute the API.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All the APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Login Time" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Login Time" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /v1/user/update/logintime
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            X-Device-ID: X-Device-ID
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: 
          body: "{\r\n \"params\": { },\r\n    \"request\":{   \r\n      \"userId\":\"9b679965-c38a-4099-a9e8-9ca89e20eab3\"\r\n    }\r\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/updatelogin'
        x-testDescription: Add user current login time
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /role/read:
    get:
      description:  >-
       This API is associated with fetching the role assigned to a user on the Sunbird Platform.
          - The **_/role/read_** endpoint executes the "read role" request based on parameters provided as metadata in the request body.
          - The format of the request URL is:  {{host}}/data/v1/role/read
          - It is mandatory to provide values for parameters required fields.
          - Mandatory fields cannot be null or empty.
      summary: Fetches User Role Information
      tags: 
      - User APIs
      operationId: V1RoleReadGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **fetch user information** request was sent'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API'
      responses:
        '200':
          description: 'OK ! Successful operation."fetch user information" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "fetch user information" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /v1/role/read
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/data/v1/role/read'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /user/profile/visibility:
    post:
      description:  >-
       This API is associated with configuring the visibility of user profiles  on the Sunbird Platform.
          - The **_/user/profile/visibility_** endpoint executes the "user profile visibility" request based on parameters provided as metadata in the request body.
          - The format of the request URL is:  '{{host}}/v1/user/profile/visibility'
          - It is mandatory to provide values for parameters required fields.
          - Mandatory fields cannot be null or empty.
      summary: User profile Visibility
      tags:
      - User APIs
      operationId: V1UserProfileVisibilityPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for user profile visibility.
        schema:
          $ref: '#/definitions/{{host}}~1v1~1user~1profile~1visibilityrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **user profile visibilty** request was sent'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: ''
      responses:
        '200':
          description: 'OK ! Successful operation."user profile visibility" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "user profile visibilty" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /v1/user/profile/visibility
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\"request\":{\n  \"userId\":\"userid\",\n  \n  \"private\":[\"gender\",\"location\",\"address\"],\n  \"public\":[\"private field name which you want to make public\"]\n}}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/v1/user/profile/visibility'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /org/v1/role/assign:
    post:
      description:  >-
       This API is associated with assigning roles to a user on the Sunbird Platform.
          - The **_/org/v1/role/assign_** endpoint executes the "read role" request based on parameters provided as metadata in the request body.
          - The format of the request URL is:  {'{{host}}/user/v1/role/assign'
          - It is mandatory to provide values for parameters required fields.
          - Mandatory fields cannot be null or empty.
      summary: Assign Role to a User
      tags:
      - User APIs
      operationId: OrgV1RoleAssignPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for assigning roles to user.
        schema:
          $ref: '#/definitions/{{host}}~1user~1v1~1role~1assignrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **assign role** request was sent'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API'
      responses:
        '200':
          description: 'OK ! Successful operation."assign role" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "assign role" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /org/v1/role/assign
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: '{"request":{"userId":"userId","organisationId":"orgId","roles":["CONTENT_CREATION","PUBLIC","CONTENT_CREATOR","ANNOUNCEMENT_SENDER"]}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/user/v1/role/assign'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /encrypt:
    get:
      description: >-
       This API is associated with securing the user information on  Sunbird Platform.
          - The **_ /encrypt_** endpoint executes the "Encrypt User Information" request based on parameters provided as metadata in the request body.
          - The format of the request URL is:  '{{host}}data/v1/user/encrypt'
          - It is mandatory to provide values for parameters required fields.
          - Mandatory fields cannot be null or empty.
      summary: Encrypt User Information
      tags:
      - User APIs
      operationId: EncryptGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which **Encrypt User Information** request was sent.'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Encrypt User Information" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Encrypt User Information" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /encrypt
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            x-authenticated-user-token: '{{user-token}}'
            Authorization: Bearer {{api-key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}data/v1/user/encrypt'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /skill/add:
    post:
      description: >-
       This API is associated with adding skills to a user on the Sunbird Platform.
          - The **_/skill/add_** endpoint executes the "add user skills" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for parameters required fields.
          - Mandatory fields cannot be null or empty.
      summary: Add User Skill
      tags:
      - User APIs
      operationId: UserV1SkillAddPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for adding user skill.
        schema:
          $ref: '#/definitions/AddSkillToUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which add user skills request was sent'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."add user skills" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "add user skills" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/skill/add
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: >2-
              {

            "request": {

                  "endorsedUserId":"userId",

                  "skillName":"ElasticSearch"

            }

            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: add skill to user
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /data/v1/skills:
    get:
      description: >-
       This API is associated with listing all user skills  on the Sunbird Platform.
          - The **_/data/v1/skills_** endpoint executes the "list all user skills" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for parameters required fields.
          - Mandatory fields cannot be null or empty.
      summary: Lists all Skills of a User
      tags:
      - User APIs
      operationId: DataV1SkillsGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which add list user skills request was sent'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."list user skills" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "list user skills" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /data/v1/skills
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            x-authenticated-user-token: '{{user-token}}'
            Authorization: Bearer {{api-key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: provide all available skills list
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  CreateUserrequest:
    title: Create UserRequest
    type: object
    properties:
      request:
        $ref: '#/definitions/Request'
    required:
      - request
  Request:
    title: Request
    type: object
    properties:
      firstName:
        description: ''
        type: string
      lastName:
        description: ''
        type: string
      password:
        description: ''
        type: string
      provider:
        description: ''
        type: string
      email:
        description: ''
        type: string
      userName:
        description: ''
        type: string
      phone:
        description: ''
        type: string
      gender:
        description: ''
        type: string
      rootOrgId:
        description: ''
        type: string
      avatar:
        description: ''
        type: string
      dob:
        description: 'YYYY-MM-dd'
        type: string
      language:
        description: ''
        type: array
        items:
          type: string
      subject:
        description: ''
        type: array
        items:
          type: string
      address:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Address'
      education:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Education'
      jobProfile:
        description: ''
        type: array
        items:
          $ref: '#/definitions/JobProfile'
    required:
      - firstName
      - lastName
      - password
      - provider
      - email
      - userName
      - phone
      - gender
      - rootOrgId
      - avatar
      - dob
      - language
      - subject
      - address
      - education
      - jobProfile
  Address:
    title: Address
    type: object
    properties:
      addType:
        description: ''
        type: string
      addressLine1:
        description: ''
        type: string
      addressLine2:
        description: ''
        type: string
      city:
        description: ''
        type: string
      state:
        description: ''
        type: string
      zipCode:
        description: ''
        type: string
    required:
      - addType
      - addressLine1
      - addressLine2
      - city
      - state
      - zipCode
  Education:
    title: Education
    type: object
    properties:
      degree:
        description: ''
        type: string
      yearOfPassing:
        description: ''
        type: integer
        format: int32
      name:
        description: ''
        type: string
      boardOrUniversity:
        description: ''
        type: string
      address:
        $ref: '#/definitions/Address4'
      percentage:
        description: ''
        type: number
        format: double
      grade:
        description: ''
        type: string
    required:
      - degree
      - yearOfPassing
      - name
      - boardOrUniversity
      - address
  Address4:
    title: Address4
    type: object
    properties:
      addressLine1:
        description: ''
        type: string
      addressLine2:
        description: ''
        type: string
      city:
        description: ''
        type: string
      state:
        description: ''
        type: string
      zipCode:
        description: ''
        type: string
    required:
      - addressLine1
      - addressLine2
      - city
      - state
      - zipCode
  JobProfile:
    title: JobProfile
    type: object
    properties:
      jobName:
        description: ''
        type: string
      role:
        description: ''
        type: string
      joiningDate:
        description: ''
        type: string
      endDate:
        description: ''
        type: string
      orgId:
        description: ''
        type: string
      orgName:
        description: ''
        type: string
      subject:
        description: ''
        type: array
        items:
          type: string
      address:
        $ref: '#/definitions/Address4'
    required:
      - jobName
      - role
      - joiningDate
      - endDate
      - orgId
      - orgName
      - subject
      - address
  GetUserByLoginIdrequest:
    title: Get User by Login IdRequest
    example:
      request:
        loginId: test_apis_2@sunbird-integrator-test.org
    type: object
    properties:
      request:
        $ref: '#/definitions/Request50'
    required:
      - request
  Request50:
    title: Request50
    type: object
    properties:
      loginId:
        description: ''
        type: string
    required:
      - loginId
  SearchUserrequest:
    title: Search UserRequest
    example:
      request:
        filters:
          provider:
          - apekx
        limit: 500
    type: object
    properties:
      request:
        $ref: '#/definitions/Request18'
    required:
    - request
  Request18:
    title: Request18
    type: object
    properties:
      filters:
        $ref: '#/definitions/Filters'
      limit:
        description: ''
        type: integer
        format: int32
    required:
    - filters
    - limit
  Filters:
    title: Filters
    type: object
    properties:
      provider:
        description: ''
        type: array
        items:
          type: string
    required:
    - provider
  UpdateUserrequest:
    title: Update UserRequest
    type: object
    properties:
      request:
        $ref: '#/definitions/Request74'
    required:
    - request
  Request74:
    title: Request74
    type: object
    properties:
      userId:
        description: ''
        type: string
      firstName:
        description: ''
        type: string
      lastName:
        description: ''
        type: string
      gender:
        description: ''
        type: string
      rootOrgId:
        description: ''
        type: string
      avatar:
        description: ''
        type: string
      dob:
        description: ''
        type: string
      aadhaarNo:
        description: ''
        type: string
      language:
        description: ''
        type: array
        items:
          type: string
      subject:
        description: ''
        type: array
        items:
          type: string
    required:
    - userId
    - firstName
    - lastName
    - gender
    - rootOrgId
    - avatar
    - dob
    - aadhaarNo
    - language
    - subject
  ResultWithNodeId:
    title: Result Containing Node Id
    type: object
    properties:
      result:
        $ref: '#/definitions/NodeId'
  ContentCreateResponse:
    description: Create Content Response
    type: object
    allOf:
      - $ref: '#/definitions/ResultWithNodeId'
      - $ref: '#/definitions/ResponseHeader'
  ResponseHeader:
    title: ResponseHeader
    type: object
    properties:
      id:
        type: string
        description: API Identifier
      ver:
        type: string
        description: API version information
      ts:
        type: string
        description: API execution timespan
      params:
        $ref: '#/definitions/ResponseParams'
      responseCode:
        type: object
        description: 'API response code '
  ResponseParams:
    title: Response Parameter
    type: object
    properties:
      resmsgid:
        type: string
        description: Response Message Id
      msgid:
        type: string
        description: Message Id
      err:
        type: string
        description: Error Code
      status:
        type: string
        description: Response Status
      errmsg:
        type: string
        description: Error Message
  EmptyResult:
    title: Empty Result
    type: object
    properties:
      result:
        type: object
        description: Empty Result
  NodeId:
    title: Node Id
    type: object
    properties:
      node_id:
        type: string
        description: Node Identifier
  ContentCreateErrorResponse:
    title: Create Content Error Response
    type: object
    allOf:
      - $ref: '#/definitions/EmptyResult'
      - $ref: '#/definitions/ResponseHeader'
  '{{host}}/v1/user/forgotpasswordrequest':
    title: '{{host}}/v1/user/forgotpasswordRequest'
    example:
      id: unique API ID
      ts: 2013/10/15 16:16:39
      params: {}
      request:
        userName: amit127.kumar17
    type: object
    properties:
      id:
        description: ''
        type: string
      ts:
        description: ''
        type: string
      params:
        description: ''
        type: object
      request:
        $ref: '#/definitions/Request100'
    required:
    - id
    - ts
    - params
    - request
  Request100:
    title: Request100
    type: object
    properties:
      userName:
        description: ''
        type: string
    required:
    - userName
  AddBadgesToUserrequest:
    title: add badges to userRequest
    example:
      params: {}
      request:
        badgeTypeId: 123343444
        receiverId: 5de6b1af-82c3-4f1b-afef-007db7390841
    type: object
    properties:
      params:
        description: ''
        type: object
      request:
        $ref: '#/definitions/Request14'
    required:
    - params
    - request
  Request14:
    title: Request14
    type: object
    properties:
      badgeTypeId:
        description: ''
        type: string
      receiverId:
        description: ''
        type: string
    required:
    - badgeTypeId
    - receiverId
  '{{host}}/user/v1/searchrequest':
    title: '{{host}}/user/v1/searchRequest'
    example:
      id: unique API ID
      ts: 2013/10/15 16:16:39
      params: {}
      request:
        query: ntp
        filters: {}
        offset: 0
        limit: 300
        sort_by:
          createdDate: desc
    type: object
    properties:
      id:
        description: ''
        type: string
      ts:
        description: ''
        type: string
      params:
        description: ''
        type: object
      request:
        $ref: '#/definitions/Request16'
    required:
    - id
    - ts
    - params
    - request
  Request16:
    title: Request16
    type: object
    properties:
      query:
        description: ''
        type: string
      filters:
        description: ''
        type: object
      offset:
        description: ''
        type: integer
        format: int32
      limit:
        description: ''
        type: integer
        format: int32
      sort_by:
        $ref: '#/definitions/SortBy'
    required:
    - query
    - filters
    - offset
    - limit
    - sort_by
  SortBy:
    title: SortBy
    type: object
    properties:
      createdDate:
        description: ''
        type: string
    required:
    - createdDate
  '{{host}}/v1/user/changepasswordrequest':
    title: '{{host}}/v1/user/changepasswordRequest'
    example:
      params: {}
      request:
        password: password
        newPassword: new password value
    type: object
    properties:
      params:
        description: ''
        type: object
      request:
        $ref: '#/definitions/Request21'
    required:
    - params
    - request
  Request21:
    title: Request21
    type: object
    properties:
      password:
        description: ''
        type: string
      newPassword:
        description: ''
        type: string
    required:
    - password
    - newPassword
  '{{host}}/v1/user/updateloginrequest':
    title: '{{host}}/v1/user/updateloginRequest'
    example:
      params: {}
      request:
        userId: 9b679965-c38a-4099-a9e8-9ca89e20eab3
    type: object
    properties:
      params:
        description: ''
        type: object
      request:
        $ref: '#/definitions/Request23'
    required:
    - params
    - request
  Request23:
    title: Request23
    type: object
    properties:
      userId:
        description: ''
        type: string
    required:
    - userId
  '{{host}}/v1/user/profile/visibilityrequest':
    title: '{{host}}/v1/user/profile/visibilityRequest'
    example:
      request:
        userId: userid
        private:
        - gender
        - location
        - address
        public:
        - private field name which you want to make public
    type: object
    properties:
      request:
        $ref: '#/definitions/Request10'
        example:
          userId: userid
          private:
          - gender
          - location
          - address
          public:
          - private field name which you want to make public
    required:
    - request
  Request10:
    title: Request10
    example:
      userId: userid
      private:
      - gender
      - location
      - address
      public:
      - private field name which you want to make public
    type: object
    properties:
      userId:
        description: ''
        example: userid
        type: string
      private:
        description: ''
        example:
        - gender
        - location
        - address
        type: array
        items:
          type: string
      public:
        description: ''
        example:
        - private field name which you want to make public
        type: array
        items:
          type: string
    required:
    - userId
    - private
    - public
  '{{host}}/user/v1/role/assignrequest':
    title: '{{host}}/user/v1/role/assignRequest'
    example:
      request:
        userId: 3d45fbd8-b911-4cc5-b503-61215902d780
        organisationId: 0123653943740170242
        roles:
        - CONTENT_CREATION
        - PUBLIC
        - CONTENT_CREATOR
        - ANNOUNCEMENT_SENDER
    type: object
    properties:
      request:
        $ref: '#/definitions/Request4'
        example:
          userId: userid
          organisationId: 0123653943740170242
          roles:
          - CONTENT_CREATION
          - PUBLIC
          - CONTENT_CREATOR
          - ANNOUNCEMENT_SENDER
    required:
    - request
  Request4:
    title: Request4
    example:
      userId: userid
      organisationId: 0123653943740170242
      roles:
      - CONTENT_CREATION
      - PUBLIC
      - CONTENT_CREATOR
      - ANNOUNCEMENT_SENDER
    type: object
    properties:
      userId:
        description: ''
        example: userid
        type: string
      organisationId:
        description: ''
        example: 0123653943740170242
        type: string
      roles:
        description: ''
        example:
        - CONTENT_CREATION
        - PUBLIC
        - CONTENT_CREATOR
        - ANNOUNCEMENT_SENDER
        type: array
        items:
          type: string
    required:
    - userId
    - organisationId
    - roles
  Request6:
    title: Request6
    example:
      userName: manzarul1.haque@taren.com
      source: web
      password: password
    type: object
    properties:
      userName:
        description: ''
        example: manzarul1.haque@taren.com
        type: string
      source:
        description: ''
        example: web
        type: string
      password:
        description: ''
        example: password
        type: string
    required:
    - userName
    - source
    - password
  AddSkillToUserrequest:
    title: add skill to userRequest
    example:
      request:
        endorsedUserId: userId
        skillName: ElasticSearch
    type: object
    properties:
      request:
        $ref: '#/definitions/Request'
        example:
          endorsedUserId: userId
          skillName: ElasticSearch
    required:
    - request
  Request101:
    title: Request101
    example:
      endorsedUserId: userId
      skillName: ElasticSearch
    type: object
    properties:
      endorsedUserId:
        description: ''
        example: userId
        type: string
      skillName:
        description: ''
        example: ElasticSearch
        type: string
    required:
    - endorsedUserId
    - skillName

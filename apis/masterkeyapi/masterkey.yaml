swagger: '2.0'
info:
  version: '1.0'
  title: Master Key API(s)
  description: >- 
    The master key resources API provides access to the API and other resources with authentication protection, without authenticating it against our authentication provider. 
       
       - It is handy for administrative tasks as there is no need to implement OAuth2 workflow to access the services. 
       - Also, there is a useful feature that allows us to suppress custom scripts implemented on various constructs, so we can get base-level CRUD operations on the constructs without any user customizations such as filtering by user or validation affecting the results.
  license:
    name: GNU Affero General Public License v3.0
    url: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
host: staging.open-sunbird.org
basePath: /data/v1/client
securityDefinitions:
    auth:
      type: apiKey  # arbitrary name for the security scheme
      in: header # The security scheme parameter is in "header"
      name: Authorization # name of the header, query parameter or cookie
schemes:
  - https
consumes:
  - application/json
  - multipart/form-data
  - application/x-www-form-urlencoded
produces:
  - application/json
paths:
  /key/update:
    patch:
      description: >-
       This API is associated with updating a masterkey.
          - The **_/ /key/update_** endpoint executes the "update masterkey" request based on parameters provided as metadata in the request body
          - Required fields cannot be left null or empty
      summary: Update key
      tags:
      - Master Key APIs
      operationId: KeyUpdatePatch
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for updating master key.
        schema:
          $ref: '#/definitions/UpdateKeyrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which update master key request was sent'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: x-authenticated-client-id
        in: header
        required: true
        type: string
        description: 'The Registered client ID to execute the APIs'
      - name: x-authenticated-client-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the APIs.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."update master key" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "update master key" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /key/update
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            x-authenticated-client-id: {{client-id}}
            x-authenticated-client-token: {{client-token}}
            Authorization: Bearer {{api-key}}
          body: >-
            {
                "request":{
                "channel":"ROOT_ORG"
                }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update key
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /key/read/{clientId}:
    parameters:
      - in: path
        name: clientId
        type: string
        required: true
        description: 'Please append a valid client Id To the request URL'
    get:
      description: >-
       This API is associated with updating a masterkey.
          - The **_/key/read/{clientId}_** endpoint executes the "fetch masterkey" request based on parameters provided as metadata in the request body
          -  {...}refers to a section of endpoint URL path that needs to be replaced by appropriate Id
          - Required fields cannot be left null or empty
      summary: Get key
      tags:
      - Master Key APIs
      operationId: KeyReadByClientidGet
      produces:
      - application/json
      parameters:
      - name: type
        in: query
        required: true
        type: string
        description: >-
          The type parameter can either be:
            - Organisation
            - Location
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which fetch master key request  was sent.'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."fetch master key" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "fetch master key" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /register:
    post:
      description: >-
       This API is associated with registering client for master key.
          - The **_/register_** endpoint executes the "register client" request based on parameters provided as metadata in the request body
          - Required fields cannot be left null or empty
      summary: Register client
      tags:
      - Master Key APIs
      operationId: RegisterPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for registering client for master key
        schema:
          $ref: '#/definitions/RegisterClientrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description:  >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which register client request was sent'
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All the APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API'
      responses:
        '200':
          description: 'OK ! Successful operation."register client" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "register client" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
      security:
      - auth: []
      x-unitTests:
      - request:
          method: POST
          uri: /register
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
          body: "{\"request\": { \n      \"clientName\":\"dev_testing\"\n  }\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Register client
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  UpdateKeyrequest:
    title: Update keyRequest
    example:
      request:
        channel: ROOT_ORG
    type: object
    properties:
      request:
        $ref: '#/definitions/Request'
        example:
          channel: ROOT_ORG
    required:
    - request
  Request:
    title: Request
    example:
      channel: ROOT_ORG
    type: object
    properties:
      channel:
        description: ''
        example: ROOT_ORG
        type: string
    required:
    - channel
  RegisterClientrequest:
    title: Register clientRequest
    example:
      request:
        clientName: dev_testing
    type: object
    properties:
      request:
        $ref: '#/definitions/Request3'
        example:
          clientName: dev_testing
    required:
    - request
  Request3:
    title: Request3
    example:
      clientName: dev_testing
    type: object
    properties:
      clientName:
        description: ''
        example: dev_testing
        type: string
    required:
    - clientName

  ResultWithNodeId:
    title: Result Containing Node Id
    type: object
    properties:
      result:
        $ref: '#/definitions/NodeId'
  ContentCreateResponse:
    description: Create Content Response
    type: object
    allOf:
      - $ref: '#/definitions/ResultWithNodeId'
      - $ref: '#/definitions/ResponseHeader'
  ResponseHeader:
    title: ResponseHeader
    type: object
    properties:
      id:
        type: string
        description: API Identifier
      ver:
        type: string
        description: API version information
      ts:
        type: string
        description: API execution timespan
      params:
        $ref: '#/definitions/ResponseParams'
      responseCode:
        type: object
        description: 'API response code '
  ResponseParams:
    title: Response Parameter
    type: object
    properties:
      resmsgid:
        type: string
        description: Response Message Id
      msgid:
        type: string
        description: Message Id
      err:
        type: string
        description: Error Code
      status:
        type: string
        description: Response Status
      errmsg:
        type: string
        description: Error Message
  EmptyResult:
    title: Empty Result
    type: object
    properties:
      result:
        type: object
        description: Empty Result
  NodeId:
    title: Node Id
    type: object
    properties:
      node_id:
        type: string
        description: Node Identifier
  ContentCreateErrorResponse:
    title: Create Content Error Response
    type: object
    allOf:
      - $ref: '#/definitions/EmptyResult'
      - $ref: '#/definitions/ResponseHeader'
